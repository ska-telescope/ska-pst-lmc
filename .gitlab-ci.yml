variables:
  # Needed if you want automatic submodule checkout
  # For details see https://docs.gitlab.com/ee/ci/yaml/README.html#git-submodule-strategy
  GIT_SUBMODULE_STRATEGY: recursive
  OCI_IMAGE_BUILD_CONTEXT: $(PWD)
  K8S_TEST_CLUSTER_TAG: k8srunner # k8srunner-psi-low
  SKA_GEMNASIUM_IMAGE: artefact.skao.int/ska-cicd-gemnasium-scanning-alpine:0.8.2
  SKA_RELEASE_REGISTRY: artefact.skao.int
  PST_DEV_REGISTRY: registry.gitlab.com/ska-telescope/pst
  SKA_TANGO_PYTANGO_BUILDER_REGISTRY: $SKA_RELEASE_REGISTRY
  SKA_TANGO_PYTANGO_BUILDER_IMAGE: ska-tango-images-pytango-builder
  SKA_TANGO_PYTANGO_BUILDER_TAG: 9.3.32
  SKA_PST_PYTHON_BUILDER_IMAGE: $SKA_TANGO_PYTANGO_BUILDER_REGISTRY/$SKA_TANGO_PYTANGO_BUILDER_IMAGE:$SKA_TANGO_PYTANGO_BUILDER_TAG
  SKA_TANGO_PYTANGO_RUNTIME_REGISTRY: $SKA_RELEASE_REGISTRY
  SKA_TANGO_PYTANGO_RUNTIME_IMAGE: ska-tango-images-pytango-runtime
  SKA_TANGO_PYTANGO_RUNTIME_TAG: 9.3.19
  SKA_PST_PYTHON_RUNTIME_IMAGE: $SKA_TANGO_PYTANGO_RUNTIME_REGISTRY/$SKA_TANGO_PYTANGO_RUNTIME_IMAGE:$SKA_TANGO_PYTANGO_RUNTIME_TAG
  PST_OCI_COMMON_BUILDER_REGISTRY: $PST_DEV_REGISTRY/ska-pst-common
  PST_OCI_COMMON_BUILDER_IMAGE: ska-pst-common-builder
  PST_OCI_COMMON_BUILDER_TAG: 0.4.0
  SKA_PST_COMMON_BUILDER_IMAGE: $PST_OCI_COMMON_BUILDER_REGISTRY/$PST_OCI_COMMON_BUILDER_IMAGE:$PST_OCI_COMMON_BUILDER_TAG
  SKA_PST_COMMON_BUILDER_RELEASE_IMAGE: $SKA_RELEASE_REGISTRY/$PST_OCI_COMMON_BUILDER:$PST_OCI_COMMON_BUILDER_TAG
  PST_COMMON_PROTO_REGISTRY: $PST_DEV_REGISTRY/ska-pst-common
  PST_COMMON_PROTO_IMAGE: ska-pst-common-proto
  PST_COMMON_PROTO_TAG: 0.4.0
  SKA_PST_COMMON_PROTOBUF_IMAGE: $PST_COMMON_PROTO_REGISTRY/$PST_COMMON_PROTO_IMAGE:$PST_COMMON_PROTO_TAG
  SKA_PST_COMMON_PROTOBUF_RELEASE_IMAGE: $SKA_RELEASE_REGISTRY/$PST_COMMON_PROTO_IMAGE:$PST_COMMON_PROTO_TAG


# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_PST_PYTHON_BUILDER_IMAGE

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - lint
  - build
  - join-reports
  - test
  - pages
  - publish
  - scan

clean shell runner:
  stage: .pre
  tags:
    - k8srunner
  script:
    # Gitlab CI badges creation
    - rm -rf build/*

python-lint:
  image: $SKA_PST_PYTHON_BUILDER_IMAGE

#Join linting reports (This stage is temporary!)
join_linting_reports:
  stage: join-reports
  tags:
    - k8srunner
  script:
    - echo "This step is needed as the artifacts can't be passed in the same stage"
    - make join-lint-reports
  artifacts:
    paths:
      - build/
    when: always

copy-protobuf:
  image: $SKA_PST_COMMON_PROTOBUF_IMAGE
  stage: build
  tags:
    - k8srunner
  script:
    - echo "Copying files across to artifacts."
    - mkdir -p build/protobuf/ska_pst_lmc_proto
    - find /app/protobuf/ska/pst/lmc -iname "*.proto" -exec cp '{}' build/protobuf/ska_pst_lmc_proto \;
  artifacts:
    paths:
      - build/
    when: always

python-generate-code:
  allow_failure: false
  stage: build
  image: $SKA_PST_PYTHON_BUILDER_IMAGE
  needs:
    - copy-protobuf
  tags:
    - k8srunner
  before_script:
    - poetry config virtualenvs.in-project true
    - echo "python-generate-code Setting.. poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE"
    - poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE
    - echo "python-generate-code Installing with poetry"
    - time poetry install --with dev

  script:
    - make PROTOBUF_DIR="$(pwd)/build/protobuf" GENERATED_PATH="$(pwd)/generated" python-generate-code
  artifacts:
    paths:
      - generated/*

oci-image-build:
  variables:
    BUILD_IMAGE: $SKA_PST_PYTHON_BUILDER_IMAGE
    BASE_IMAGE: $SKA_PST_PYTHON_RUNTIME_IMAGE
    PROTOBUF_IMAGE: $SKA_PST_COMMON_PROTOBUF_IMAGE
    PST_COMMON_BUILDER_IMAGE: $SKA_PST_COMMON_BUILDER_IMAGE

  script:
    - make oci-build-all CAR_OCI_REGISTRY_HOST=${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME} OCI_BUILD_ADDITIONAL_ARGS=" --build-arg BUILD_IMAGE=${BUILD_IMAGE} --build-arg BASE_IMAGE=${BASE_IMAGE} --build-arg PROTOBUF_IMAGE=${PROTOBUF_IMAGE} --build-arg PST_COMMON_BUILDER_IMAGE=${PST_COMMON_BUILDER_IMAGE}"

stop-k8s-test:
  image: "$SKA_K8S_TOOLS_DEPLOY_IMAGE"
  stage: test
  tags:
  - k8srunner
  when: manual
  variables:
    KUBE_NAMESPACE: ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA
  script:
  - make k8s-uninstall-chart
  - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps
    --all
  - make k8s-delete-namespace
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    action: stop

k8s-test:
  # allow_failure: true
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  stage: test
  needs: ["oci-image-build"] # Required to pull oci from gitlab
  tags:
    - k8srunner
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  before_script:
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
    - 'make help | grep k8s-test'
    - make k8s-install-chart
    - make k8s-vars
    - make k8s-wait
  script:
    - kubectl config get-contexts
    - make k8s-get-pods
    - make k8s-pod-versions
    - make k8s-describe
    - make k8s-test
    - make k8s-podlogs
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - "build/"
    reports:
      junit: build/report.xml
    when: always
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    on_stop: stop-k8s-test
    auto_stop_in: 1 minute
  rules:
    - exists:
        - tests/**/*
  when: manual

python-build-for-publication: # Executed on a tag
  allow_failure: false
  needs:
    - python-generate-code
  before_script:
    - '[ -f .make/python.mk ] || (echo "File python.mk not included in Makefile; exit 1")'
    - 'make help | grep python-build'
    - cp -fr generated/ska_pst_lmc_proto src/

python-build-for-development: # Executed on non-tagged commit
  allow_failure: false
  needs:
    - python-generate-code
  before_script:
    - '[ -f .make/python.mk ] || (echo "File python.mk not included in Makefile; exit 1")'
    - 'make help | grep python-build'
    - cp -fr generated/ska_pst_lmc_proto src/

python-test:
  # allow_failure: true
  image: $SKA_PST_PYTHON_BUILDER_IMAGE
  retry: 2
  needs:
    - python-generate-code

# Include CI templates
include:
  # Python packages build,lint, test and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

  # OCI
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

  # Create Gitlab CI badges from CI metrics
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

  # Create a release
  - project: 'ska-telescope/templates-repository'
    file : 'gitlab-ci/includes/release.gitlab-ci.yml'

  # Publish Helm chart
  - project: 'ska-telescope/templates-repository'
    file : 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

  # k8s steps
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

  # changelog release page
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/changelog.gitlab-ci.yml'

  # Override for branch based builds
  - local: '.gitlab/ci/branch.yml'
    rules:
      - if: $CI_COMMIT_BRANCH =~ /at3.*/

  # Release builds
  - local: '.gitlab/ci/release.gitlab-ci.yml'
    rules:
      - if: ($CI_COMMIT_BRANCH =~ /rel.*|main/) && ($CI_PIPELINE_SOURCE != "pipeline")
      - if: $CI_COMMIT_TAG
