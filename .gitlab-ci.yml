# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: artefact.skao.int/ska-tango-images-pytango-builder:9.3.10

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - lint
  - build
  - join-reports
  - test
  - pages
  - publish
  - scan

# Standardised included jobs
variables:
  GIT_SUBMODULE_STRATEGY: recursive

include:
  - local: '.gitlab/ci/all.yml'
    rules:
      - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

  - local: '.gitlab/ci/branch.yml'
    rules:
      - if: $CI_COMMIT_BRANCH =~ /at3.*/
        when: manual
